\documentclass[nojss]{jss}
% \documentclass[article]{jss}
\usepackage{amsmath,amssymb,amsfonts,thumbpdf}
\usepackage{multirow,longtable}

\definecolor{darkgray}{rgb}{0.1,0.1,0.1}
\definecolor{heat1}{rgb}{0.8274510, 0.2470588, 0.4156863}
\definecolor{heat2}{rgb}{0.8823529, 0.4392157, 0.2980392}
\definecolor{heat3}{rgb}{0.9137255, 0.6039216, 0.1725490}
\definecolor{heat4}{rgb}{0.9098039, 0.7647059, 0.2352941}
\definecolor{heat5}{rgb}{0.8862745, 0.9019608, 0.7411765}
\definecolor{blue1}{RGB}{0, 126, 255}


%% additional commands
\newcommand{\squote}[1]{`{#1}'}
\newcommand{\dquote}[1]{``{#1}''}
\newcommand{\fct}[1]{{\texttt{#1()}\index{#1@\texttt{#1()}}}}
\newcommand{\class}[1]{\dquote{\texttt{#1}}}
%% for internal use
\newcommand{\fixme}[1]{\emph{\marginpar{FIXME} (#1)}}
\newcommand{\readme}[1]{\emph{\marginpar{README} (#1)}}

%% Authors: NU + rest in alphabetical order
\author{Nikolaus Umlauf\\Universit\"at Innsbruck \And
        Achim Zeileis\\Universit\"at Innsbruck}
\Plainauthor{Nikolaus Umlauf, Achim Zeileis}

\title{BAMLSS: Bayesian additive models for location, scale and shape (and beyond)}
\Plaintitle{BAMLSS: Bayesian additive models for location, scale and shape (and beyond)}

\Keywords{GAMLSS, distributional regression, MCMC, \proglang{BUGS}, \proglang{R}, software}
\Plainkeywords{GAMLSS, distributional regression, MCMC, BUGS, R, software}

\Abstract{
  Bayesian analysis provides a convenient setting for the estimation of complex generalized
  additive regression models (GAM). Since computational power has tremendously increased in the past
  decade it is now possible to tackle complicated inferential problems, e.g., with Markov chain
  Monte Carlo simulation, on virtually any modern computer. This is one of the reasons why
  Bayesian methods have become quite popular and it has lead to a number of highly specialized and
  optimized estimation engines. Because of the very general structure of the additive predictor in
  GAMs, we propose an unified modeling architecture that can deal with a wide range of types of
  model terms and can benefit from different algorithms in order to estimate Bayesian additive
  models for location, scale and shape (and beyond).
}

\Address{
  Nikolaus Umlauf, Achim Zeileis\\
  Department of Statistics\\
  Faculty of Economics and Statistics\\
  Universit\"at Innsbruck\\
  Universit\"atsstr.~15\\
  6020 Innsbruck, Austria\\
  E-mail: \email{Nikolaus.Umlauf@uibk.ac.at}, \email{Achim.Zeileis@R-project.org}\\
  URL: \url{http://eeecon.uibk.ac.at/~umlauf/},\\
  \phantom{URL: }\url{http://eeecon.uibk.ac.at/~zeileis/}
}

%% Sweave/vignette information and metadata
%% need no \usepackage{Sweave}
\SweaveOpts{engine = R, eps = FALSE, keep.source = TRUE}

%<<preliminaries, echo=FALSE, results=hide>>=
%options(width = 70, prompt = "R> ", continue = "+  ")
%set.seed(1090)
%library("bamlss")
%options("use.akima" = TRUE)
%@


\begin{document}


\section{Introduction} \label{sec:intro}

The generalized additive model for location, scale and shape
(GAMLSS,~\citealp{bamlss:Rigby+Stasinopoulos:2005}) relaxes the distributional assumptions of
an response variable in a way that allows for modeling the mean (location) as well
as higher moments (scale and shape) in terms of covariates. This is
especially useful in cases where, e.g., the response does not follow the exponential family or
particular interest lies on scale and shape parameters. Moreover, covariate effects can have
arbitrary forms such as, e.g., linear, nonlinear, spatial or random effects. Hence, each parameter
of the distribution is linked to an additive predictor in similar fashion as for the well
established generalized additive model (GAM,~\citealp{bamlss:Hastie+Tibshirani:1990}).

The terms of an additive predictor can be represented by an unified basis function approach, which
supports a general model architecture. This fact can be further exploited because each term can be
transformed into a mixed model representation \citep{bamlss:Ruppert+Wand+Carrol:2003, bamlss:Wand:2003}, 
independent on the assumptions about smoothness controlled by a penalty on the regression
coefficients. In a Bayesian setting, equivalent smooth forms and generality is achieved using, e.g.,
normal priors on the regression coefficients
\citep{bamlss:Fahrmeir+Kneib+Lang+Marx:2013, bamlss:Brezger+Lang:2006}.

The Bayesian approach is particularly attractive since it provides valid inference that does not
rely on asymptotic properties and allows extensions such as variable selection or multilevel models.
Probably for this reason, and because computational power has tremendously increased in the past
decade, the number of Bayesian estimation engines that can tackle complicated inferential problems
has seen a constant rise. As a whole, existing estimation engines already provide infrastructures
for a number of regression problems exceeding univariate responses, e.g., for multinomial,
multivariate normal or mixed discrete-continuous distributed variables, and so forth. In addition,
most of the engines support random effect estimation which in the end can in principle be utilized
for setting up complex models with additive predictors (see, e.g., \citealp{bamlss:Wood:2006}).

However, the majority of engines (Bayesian and frequentist) use different model setups and output 
functionalities, which makes it difficult for practitioners, e.g., to compare properties of
different algorithms or to select the appropriate distribution and variables, etc. The reasons are
manifold: the use of different model specification languages like
\proglang{BUGS}~\citep{bamlss:BUGS:2009} or \proglang{R}~\citep{bamlss:R}; different standalone
statistical software packages like \pkg{BayesX}~\citep{bamlss:Umlauf+Adler+Kneib+Lang+Zeileis:2014,
bamlss:Belitz+Brezger+Kneib+Lang:2011}, \pkg{JAGS}~\citep{bamlss:Plummer:2013},
\pkg{Stan}~\citep{bamlss:stan-software:2013} or
\pkg{WinBUGS}~\citep{bamlss:Lunn+Thomas+Best+Spiegelhalter:2000}; or even differences within the
same environment.

In order to ease the usage of already existing implementations and code, as well as to facilitate
the development of new algorithms and extensions, we present an unified and entirely modular
architecture for models with additive predictors which does not restrict to any type of regression
problem. Hence, the approach supports more than the GAMLSS statistical model class and is sometimes
referred to as distributional regression. However, because of the great similarities with GAMLSS we
call the conceptional framework Bayesian additive models for location, scale and shape (BAMLSS).

The remainder of the paper is as follows. In Section~\ref{sec:models} the models supported by this
framework are briefly introduced. Section~\ref{sec:arch} then presents the general modeling
architecture and model specification problem. In Section~\ref{sec:softex} a software implementation
of the concept is presented briefly together with a couple of examples.


\section{Model structure and overview} \label{sec:models}

Supposing data of $i = 1, \ldots, n$ observations is available, the models discussed in this paper
assume conditional independence of individual response observations given covariates.
Within the GAMLSS model class all parameters of the response distribution can be modeled by
explanatory variables such that
\begin{equation} \label{eqn:dreg}
y \sim \mathbf{\mathcal{D}}\left(h_{1}(\theta_{1}) = \eta_{1}, \,\,
  h_{2}(\theta_{2}) = \eta_{2}, \dots, \,\, h_{K}(\theta_{K}) =
  \eta_{K}\right),
\end{equation}
where $\mathbf{\mathcal{D}}$ denotes any distribution available for the response
variable $y$ and $\theta_k$, $k = 1, \ldots, K$, are parameters that are linked to additive predictors
using known monotonic and twice differentiable functions
$h_{k}(\cdot)$ \citep{bamlss:Rigby+Stasinopoulos:2005}. Note that the response may also be a
q-dimensional vector $\mathbf{y} = (y_{1}, \ldots, y_{q})^\top$, e.g., when
$\mathbf{\mathcal{D}}$ is a multivariate normal density
(see, e.g., \citealp{bamlss:Klein+Kneib+Klasen+Lang:2014}).
The $k$th additive predictor (for simplicity, the parameter index $k$ is suppressed in the
following) is given by
\begin{equation} \label{eqn:structadd}
\eta = f_1(\mathbf{x}) + \ldots + f_p(\mathbf{x}),
\end{equation}
where $\mathbf{x}$ represents a generic vector of all linear and nonlinear modeled covariates. The
functions $f_j$ are possibly smooth functions encompassing various types of effects, e.g.:
\begin{itemize}
  \item Linear effects of continuous covariates: $f_j(\mathbf{x}) = x_{1}\beta$.
  \item Nonlinear effects of continuous covariates: $f_j(\mathbf{x}) = f(x_{1})$.
  \item Two-dimensional surfaces: $f_j(\mathbf{x}) = f(x_{1}, x_{2})$.
  \item Spatially correlated effects of locations index $x_s$: $f_j(\mathbf{x}) = f_{spat}(x_{s})$.
  \item Varying coefficients: $f_j(\mathbf{x}) = f(x_{2}) \cdot x_{1}$.
  \item Spatially varying effects: $f_j(\mathbf{x}) = f_{spat}(x_{s}) \cdot x_{1}$ or
    $f_j(\mathbf{x}) = f(x_{2}, x_{3}) \cdot x_{1}$.
  \item Random intercepts with cluster index $c$: $f_j(\mathbf{x}) = \beta_c$.
  \item Random slopes with cluster index $c$: $f_j(\mathbf{x}) = x_1\beta_c$.
\end{itemize}
Also note that each predictor in (\ref{eqn:dreg}) may contain a different set of covariate effects 
supporting very complex structures with arbitrary combinations. This general framework is also
known as structured additive regression
(STAR,~\citealp{bamlss:Fahrmeir+Kneib+Lang:2004, bamlss:Brezger+Lang:2006}) and covers a number of
well known model classes that have been developed for the exponential family of distributions as
special cases, e.g., generalized additive models (GAM, \citealp{bamlss:Hastie+Tibshirani:1990}),
generalized additive mixed models (GAMM, \citealp{bamlss:Lin+Zhang:1999}), geoadditive models
\citep{bamlss:Kamman+Wand:2003}, varying coefficient models \citep{bamlss:Hastie+Tibshirani:1993},
and geographically weighted regression \citep{bamlss:Fotheringham+Brunsdon+Charlton:2002}.


\section{A conceptional Lego toolbox} \label{sec:legobox}

\subsection{Terms and priors} \label{sec:termprior}

In the following, we assume that for each function $f_j$ the vector of function evaluations
$\mathbf{f}_j = (f_j(\mathbf{x}_{1}),\ldots,f_j(\mathbf{x}_{n}))^{\top}$ of the $i = 1, \ldots, n$
observations is a composition of
\begin{equation} \label{eqn:functions}
\mathbf{f}_j = f_j(\mathbf{X}_j, \boldsymbol{\beta}_j),
\end{equation}
where $\mathbf{X}_j$ ($n \times m_j$) is a design matrix and the structure of $\mathbf{X}_j$ only
depends on the type of covariate(s) and prior assumptions. The vector $\boldsymbol{\beta}_j$
($q_j \times 1$) are regression coefficients that need to be estimated. Hence, the predictor
(\ref{eqn:structadd}) may be written as $\boldsymbol{\eta} = \mathbf{f}_1 + \ldots + \mathbf{f}_p$.
The computation of the vector $\mathbf{f}_j$ is in most cases a matrix product of the design matrix
and the coefficients, however, the framework presented here allows for arbitrary functional types
that may not have this structure, e.g., nonlinear growth curve estimation of covariates.
In the frequentist setting, to ensure regularization, e.g., for penalizing too abrupt jumps using a
P(enalised)-spline representation of $f_j$ \citep{bamlss:Eilers+Marx:1996}, it is common to add a
penalty $\text{pen}(\mathbf{f}_j) = \text{pen}(\boldsymbol{\beta}_j)$ to the regression problem.
Within the Bayesian formulation, the equivalent is to put prior distributions $p(\cdot)$ on
the regression coefficients $\boldsymbol{\beta}_j$. The following outlines frequently used terms
and corresponding priors for parameters within STAR predictors (\ref{eqn:structadd}).

\subsubsection{Linear effects}

Linear or parametric effects can be written as a simple matrix product
$\mathbf{f}_j = \mathbf{X}_j\boldsymbol{\beta}_j$. A common choice of $p(\boldsymbol{\beta}_j)$
is to use a non-informative uniform prior $p(\boldsymbol{\beta}_j) \propto 1$. One of the simplest
informative priors is a normal prior given by
\begin{equation} \label{eqn:linprior}
p(\boldsymbol{\beta}_j) \propto \exp \left(- \frac{1}{2}
  (\boldsymbol{\beta_j} - \mathbf{m}_j)^{\top}\mathbf{M}_j^{-1}(\boldsymbol{\beta}_j -
  \mathbf{m}_j)\right),
\end{equation}
with prior mean $\mathbf{m}_j$ and prior covariance matrix $\mathbf{M}_j$. In a lot of applications
a vague prior specification is used with $\mathbf{m}_j = \mathbf{0}$ and a large variance.

\subsubsection{Nonlinear effects}

Although the functional forms may be rather complex within predictor (\ref{eqn:structadd}),
sometimes including more than one covariate, it is again possible to obtain a linear representation
$\mathbf{f}_j = \mathbf{X}_j\boldsymbol{\beta}_j$ using a basis function approach. Here, the columns
of the design matrix $\mathbf{X}_j$ hold the so called basis functions which are predetermined by
the type of the function chosen. More specifically, for functions of a single covariate commonly
used basis functions are B-splines or thin plate splines, which are also capable to estimate higher
dimensional functions. Moreover, higher dimensional functions can always be obtained by tensor
product basis construction of marginal basis of an arbitrary number of covariates. An overview of a
number of basis functions is provided, e.g., in \citet{bamlss:Fahrmeir+Kneib+Lang+Marx:2013} and
\citet{bamlss:Wood:2006}.

The elegance of the approach is that regularization of the possibly very complex functions is
accomplished by placing a generic multivariate normal prior
\begin{equation} \label{eqn:shrinkprior}
p(\boldsymbol{\beta}_j) \propto \left( \frac{1}{\tau_j^2} \right)^{rk(\mathbf{K}_j) / 2} \exp \left(- \frac{1}{2\tau_j^2}
\boldsymbol{\beta_j}^{\top}\mathbf{K}_j\boldsymbol{\beta}_j\right)
\end{equation}
on the regression coefficients $\boldsymbol{\beta}_j$, where the precision matrix $\mathbf{K}_j$
corresponds to the frequentist's penalty matrix and depends on the type of function
associated with the term. The variance parameter $\tau_j^2$ is equivalent to the inverse smoothing
parameter in a frequentist approach and controls the trade off between flexibility and smoothness.
A common choice of prior for the variance parameter is a weakly informative inverse Gamma hyperprior
\begin{equation} \label{eqn:ig}
p(\tau_j^2) = \frac{b_j^{a_j}}{\Gamma(a_j)} (\tau_j^2)^{-(a_j + 1)} \exp(-b_j / \tau_j^2).
\end{equation}
with $a_j = b_j = 0.001$ as a standard option. Small values for $a_j$ and $b_j$ correspond to an 
approximate uniform distribution for $\log(\tau_j^2)$. Note that within this notion a ridge penalty
on linear effects can be obtained by $\mathbf{K}_j = \mathbf{I}$, similarly independent and
identically distributed (i.i.d.) random effects can be incorporated using prior (\ref{eqn:shrinkprior}).

In addition, the individual model components $\mathbf{X}_j\boldsymbol{\beta}_j$ for any basis
function specification can be further decomposed into a mixed model representation given by
\begin{equation*} \label{eqn:mixed}
\mathbf{f}_j = \tilde{\mathbf{X}}_j\tilde{\boldsymbol{\gamma}}_j +
  \mathbf{U}_j\tilde{\boldsymbol{\beta}}_j,
\end{equation*}
where $\tilde{\boldsymbol{\gamma}}_j$ represents the fixed effects parameters and 
$\tilde{\boldsymbol{\beta}}_j \sim N(\mathbf{0}, \tau^2_j\mathbf{I})$ i.i.d.\ random effects.
The design matrix $\mathbf{U}_j$ is derived from a spectral decomposition of the penalty matrix
$\mathbf{K}_j$ and $\tilde{\mathbf{X}}_j$ by finding a basis of the null space of $\mathbf{K}_j$
such that $\tilde{\mathbf{X}}_j^{\top}\mathbf{K}_j = \mathbf{0}$, i.e., parameters
$\tilde{\boldsymbol{\gamma}}_j$ are not penalized (see, e.g.,
\citealp{bamlss:Fahrmeir+Kneib+Lang+Marx:2013, bamlss:Ruppert+Wand+Carrol:2003, bamlss:Wand:2003}).

\subsubsection{Non-standard effects}

Within the scope of the presented framework we allow for functions of covariates that cannot
necessarily be written by a matrix product $\mathbf{X}_j\boldsymbol{\beta}_j$. As an
example, nonlinear growth curve estimation with the Gompertz function requires the evaluation of
$$
\mathbf{f}_j = \beta_{j1} \cdot \exp \left( -\exp\left( \beta_{j2} +
  \mathbf{X}_j\beta_{j2} \right) \right)
$$
and particular interest may lie on the parameters describing the growth rate, lag phase, etc.
As a standard option one can put normal priors (\ref{eqn:linprior}) or non-informative uniform
priors on $\boldsymbol{\beta}$. To generalize this, the framework allows for any functions
$f_j(\mathbf{X}_j, \boldsymbol{\beta}_j)$ and prior(s) $p(\boldsymbol{\beta}_j)$ that are
available for the covariate(s).

%The representation of the terms in the structured additive predictor (\ref{eqn:structadd})
%already suggests a general and modular architecture. However, to keep the focus on maximum
%flexibility of the conceptional framework it is useful to list the typical steps needed to estimate
%the models presented in Section~\ref{sec:models}:
%\begin{enumerate}
%\item Choosing an appropriate distribution for the response.
%\item Specification of the model terms the parameters are modeled by.
%\item Setting up the corresponding design and penalty matrices.
%\item Starting the estimation engine.
%\item Processing the results for printing summaries, plotting, etc. 
%\end{enumerate}
%Step 2 thereby requires some type of generic model formula syntax to actually specify the
%dependencies of the parameters on covariates. Choosing an appropriate distribution in step 1 implies
%that the estimation engine used in step 4 includes the corresponding implementation. In addition,
%to compute, e.g., goodness of fit plots using quantile residuals \citep{bamlss:Dunn+Gordon:1996},
%the distribution specification oftentimes needs information beyond the log-likelihood function.
%Moreover, the individual steps should be modular, e.g., changing the estimation engine does not
%require additional adjustments on subsequent infrastructures. The following describes the
%conceptional building blocks in more detail.

\subsection{Density} \label{sec:density}

%Any statistical software for regression models needs some description system for the supported
%distributions. Since most estimation algorithms have at least one common part, a modular system
%with reusable elements arises naturally from the following characterizations.

The main building block of regression model algorithms is the probability density function
$f(\mathbf{y} | \boldsymbol{\theta}_1, \ldots, \boldsymbol{\theta}_K)$, or for
computational reasons its logarithm.
Note that $f$ is considered to be a general density and $\boldsymbol{\theta}_k$, $k = 1, \ldots, K$,
are parameters that are linked to STAR predictors given in equation (\ref{eqn:structadd}).
Estimation typically requires to evaluate the log-likelihood function
\begin{equation} \label{eqn:density}
\ell(\boldsymbol{\vartheta} | \mathbf{y}) =
  \sum_{i = 1}^n ln \, f(\mathbf{y}_i | \theta_{i1} = h_1^{-1}(\eta_{i1}), \ldots,
  \theta_{iK} = h_K^{-1}(\eta_{iK}))
\end{equation}
a number of times, where the vector
$\boldsymbol{\vartheta} = (\boldsymbol{\vartheta}_1, \ldots, \boldsymbol{\vartheta}_K)^\top$ 
comprises all model coefficients that should be estimated and $\boldsymbol{\theta}_k$ are vectors
of length $n$. Note that in the simplest case $\boldsymbol{\vartheta}_k =
(\boldsymbol{\vartheta}_{1k}, \ldots, \boldsymbol{\vartheta}_{p_kk})^\top =
(\boldsymbol{\beta}_{1k}, \ldots, \boldsymbol{\beta}_{p_kk})^\top$ for $k = 1, \ldots, K$.
Assigning prior distributions to the individual model components, e.g., given by the normal
prior (\ref{eqn:shrinkprior}) and the inverse gamma prior (\ref{eqn:ig}), results in the log-posterior
\begin{equation} \label{eqn:logpost}
ln \, p(\boldsymbol{\vartheta} | \mathbf{y}) \propto
  \ell(\boldsymbol{\vartheta} | \mathbf{y}) +
  \sum_{k = 1}^K\sum_{j = 1}^{p_k} \left\{ ln \, p_{jk}(\boldsymbol{\vartheta}_{jk}) \right\},
\end{equation}
where, e.g., $\boldsymbol{\vartheta}_{jk} = (\boldsymbol{\beta}_{jk}, \boldsymbol{\tau}^2_{jk})^\top$
now includes all variances associated with this term, too, and prior $p_{jk}(\cdot)$ denotes the
combination of all assigned priors on parameters $\boldsymbol{\vartheta}_{jk}$. Also note that from a
frequentist perspective (\ref{eqn:logpost}) can be viewed as a penalized log-likelihood using
prior (\ref{eqn:shrinkprior}) for fixed variance parameters $\boldsymbol{\tau}_{jk}^2$.


\subsection{Model fitters} \label{sec:modelfit}

Bayesian point estimates of $\boldsymbol{\vartheta}$ are obtained by posterior mode, mean or median
estimation. While posterior mode estimation requires maximization of the log-posterior
(\ref{eqn:logpost}), which has an unique (sometimes analytical) solution in a number of cases,
posterior mean and median estimation involves solving (possibly) high-dimensional integrals, usually
requiring computer intensive techniques such as Markov chain Monte Carlo (MCMC) simulation. The
following describes the quantities needed for generic iterative algorithms for estimating Bayesian
distributional regression models.

\subsubsection{Posterior mode}

The mode of the posterior distribution is the mode of the log-posterior (\ref{eqn:logpost}) given by
\begin{equation}
\text{Mod}(\boldsymbol{\vartheta} | \mathbf{y}) =
  \underset{\boldsymbol{\vartheta}}{\text{arg max }} ln \, p(\boldsymbol{\vartheta} | \mathbf{y})
\end{equation}
and equals the maximum likelihood estimator assigning uniform priors
$p_{jk}(\boldsymbol{\vartheta}_{jk}) \propto 1$, $j = 1, \ldots, p_k$, $k = 1, \ldots, K$.
For models involving shrinkage priors, e.g., given by (\ref{eqn:shrinkprior}), the posterior mode is
equivalent to a penalized maximum likelihood estimator for fixed variance parameters
$\boldsymbol{\tau}_{jk}^2$ and $p(\boldsymbol{\tau}_{jk}^2) \propto 1$. Moreover, the structure of
(\ref{eqn:logpost}) prohibits simultaneous estimation of
$\boldsymbol{\vartheta}_{jk} = (\boldsymbol{\beta}_{jk}, \boldsymbol{\tau}^2_{jk})^\top$ and the
estimator $\hat{\boldsymbol{\tau}}^2_{jk}$ is usually derived by additionally
minimizing an information criterion such as the Akaike information criterion (AIC) or the Bayesian
information criterion (BIC) (see also \citealp{bamlss:Rigby+Stasinopoulos:2005} Appendix~A.2. for
a more detailed discussion on variance/hyperparameter estimation). Estimation of
$\boldsymbol{\vartheta}$ requires solving equations
$\partial (ln \, p(\boldsymbol{\vartheta} | \mathbf{y})) / \partial \boldsymbol{\vartheta} = \mathbf{0}$
and usually the problem is solved with an iterative updating scheme of the form
\begin{equation} \label{eqn:updating}
\boldsymbol{\vartheta}^{(t + 1)} = U(\boldsymbol{\vartheta}^{(t)}),
\end{equation}
with updating function $U(\cdot)$ and $\hat{\boldsymbol{\vartheta}}$ as a fixed point of the iteration.
A particularly convenient way to maximize (\ref{eqn:logpost}) is a Newton-Raphson type updating
\begin{equation} \label{eqn:newton}
\boldsymbol{\vartheta}^{(t + 1)} = U(\boldsymbol{\vartheta}^{(t)}) = \boldsymbol{\vartheta}^{(t)} -
  \mathbf{H}\left( \boldsymbol{\vartheta}^{(t)} \right)^{-1}\mathbf{s}\left( \boldsymbol{\vartheta}^{(t)} \right)
\end{equation}
with score vector
\begin{equation} \label{eqn:score}
\mathbf{s}(\boldsymbol{\vartheta}) = 
  \frac{\partial ln \, p(\boldsymbol{\vartheta} | \mathbf{y})}{\partial \boldsymbol{\vartheta}}
= \frac{\partial \ell(\boldsymbol{\vartheta} | \mathbf{y})}{\partial \boldsymbol{\vartheta}} +
    \sum_{k = 1}^K\sum_{j = 1}^{p_k} \left\{ \frac{\partial ln \, p_{jk}(\boldsymbol{\vartheta}_{jk})}{\partial \boldsymbol{\vartheta}} \right\}.
\end{equation}
and hessian matrix $\mathbf{H}(\boldsymbol{\vartheta})$ with components
\begin{equation} \label{eqn:hessian}
\mathbf{H}_{ks}(\boldsymbol{\vartheta}) = 
\frac{\partial^2 ln \, p(\boldsymbol{\vartheta})}{\partial \boldsymbol{\vartheta}_k \partial \boldsymbol{\vartheta}_s^\top} = \frac{\partial \mathbf{s}(\boldsymbol{\vartheta}_k)}{\partial \boldsymbol{\vartheta}_s^\top},
\end{equation}
for $k = 1, \dots, K$ and $s = 1, \dots, K$. By chain rule, the part of the score vector involving
the derivatives of the log-likelihood for the $k$th parameter can be further decomposed to
\begin{equation} \label{eqn:score2}
\frac{\partial \ell(\boldsymbol{\vartheta} | \mathbf{y})}{\partial \boldsymbol{\vartheta}_k} =
  \frac{\partial \ell(\boldsymbol{\vartheta} | \mathbf{y})}{\partial \boldsymbol{\eta}_k}
  \frac{\partial \boldsymbol{\eta}_k}{\partial \boldsymbol{\vartheta}_k} = 
  \frac{\partial \ell(\boldsymbol{\vartheta} | \mathbf{y})}{\partial \boldsymbol{\theta}_k}
  \frac{\partial \boldsymbol{\theta}_k}{\partial \boldsymbol{\eta}_k}
  \frac{\partial \boldsymbol{\eta}_k}{\partial \boldsymbol{\vartheta}_k},
\end{equation}
including the derivatives of the log-likelihood with respect to parameters $\boldsymbol{\theta}_k$,
the derivative of the link functions and the derivative of the STAR predictor
$\boldsymbol{\eta}_k$ with respect to coefficients $\boldsymbol{\vartheta}_k$. Again by chain rule,
the components of $\mathbf{H}_{ks}$ including $\ell(\boldsymbol{\vartheta} | \mathbf{y})$ can be
written as
\begin{equation} \label{hessian2}
\frac{\partial^2 \ell(\boldsymbol{\vartheta} | \mathbf{y})}{\partial \boldsymbol{\vartheta}_k \partial \boldsymbol{\vartheta}_s^\top} =
\left( \frac{\partial \boldsymbol{\eta}_s}{\partial \boldsymbol{\vartheta}_s} \right)^\top
\frac{\partial^2 \ell(\boldsymbol{\vartheta} | \mathbf{y})}{\partial \boldsymbol{\eta}_k\partial \boldsymbol{\eta}_s^\top}
\frac{\partial \boldsymbol{\eta}_k}{\partial \boldsymbol{\vartheta}_k}
\,\, \underbrace{
  \, + \, \frac{\partial \ell(\boldsymbol{\vartheta} | \mathbf{y})}{\partial \boldsymbol{\eta}_k}
    \frac{\partial^2 \boldsymbol{\eta}_k}{\partial^2 \boldsymbol{\vartheta}_k}}_{\text{if } k = s},
\end{equation}
where the second term drops if all functions (\ref{eqn:functions}) can be written as a linear
combination of a design matrix and coefficients, e.g., when using a basis function approach. Within
the first term, the second derivatives of the log-likelihood involving the predictors can be written
as
\begin{equation} \label{hessian3}
\frac{\partial^2 \ell(\boldsymbol{\vartheta} | \mathbf{y})}{\partial \boldsymbol{\eta}_k\partial \boldsymbol{\eta}_s^\top} =
  \frac{\partial \ell(\boldsymbol{\vartheta} | \mathbf{y})}{\partial \boldsymbol{\theta}_k}
  \frac{\partial^2 \boldsymbol{\theta}_k}{\partial \boldsymbol{\eta}_k \partial \boldsymbol{\eta}_s^\top} + 
  \frac{\partial^2 \ell(\boldsymbol{\vartheta} | \mathbf{y})}{\partial \boldsymbol{\theta}_k \partial \boldsymbol{\theta}_s^\top}
  \frac{\partial \boldsymbol{\theta}_k}{\partial \boldsymbol{\eta}_k}
  \frac{\partial \boldsymbol{\theta}_s}{\partial \boldsymbol{\eta}_s}
\end{equation}
involving the second derivatives of the link functions.

Although solving the updating scheme (\ref{eqn:newton}) is feasible, from the computational
perspective of the model class it is still a bit unhandy. Fortunately, the problem of iteratively
finding the roots for $\boldsymbol{\vartheta}$ can be partitioned into separate updating equations
using leapfrog or zigzag iteration \citep{bamlss:Smyth:1996}. Now let
\begin{eqnarray}
\boldsymbol{\vartheta}_1^{(t + 1)} &=& U_1(\boldsymbol{\vartheta}_1^{(t)}, \boldsymbol{\vartheta}_2^{(t)},
  \ldots, \boldsymbol{\vartheta}_K^{(t)}) \nonumber \\
\boldsymbol{\vartheta}_2^{(t + 1)} &=& U_2(\boldsymbol{\vartheta}_1^{(t+1)}, \boldsymbol{\vartheta}_2^{(t)},
  \ldots, \boldsymbol{\vartheta}_K^{(t)}) \nonumber \\
  &\vdots& \nonumber \\
\boldsymbol{\vartheta}_K^{(t + 1)} &=& U_K(\boldsymbol{\vartheta}_1^{(t+1)}, \boldsymbol{\vartheta}_2^{(t+1)},
  \ldots, \boldsymbol{\vartheta}_K^{(t)})
\end{eqnarray}
be an partitioned updating scheme with updating functions $U_k(\cdot)$, i.e., in each iteration
one parameter is maximized holding the other parameters fixed. Note that this updating scheme can be
further partitioned for each function within parameter block $k$, leading to a highly modular
system.

For orthogonal parameters $\boldsymbol{\vartheta}_k$, the updating scheme can be written as
a simplified Newton-Raphson iteration
\begin{equation} \label{eqn:blocknewton}
\boldsymbol{\vartheta}_k^{(t + 1)} = U_k(\boldsymbol{\vartheta}_k^{(t)} | \cdot) = \boldsymbol{\vartheta}_k^{(t)} -
  \mathbf{H}_{kk}\left( \boldsymbol{\vartheta}_k^{(t)} \right)^{-1}\mathbf{s}_k\left( \boldsymbol{\vartheta}_k^{(t)} \right).
\end{equation}
Assuming a basis function approach for functions (\ref{eqn:functions}) with multivariate normal
priors (\ref{eqn:shrinkprior}), the hessian matrix in (\ref{eqn:blocknewton}) can be written as
$$
\mathbf{H}_{kk}\left( \boldsymbol{\vartheta}_k^{(t)} \right) =
\begin{pmatrix}
\mathbf{X}_{1k}^\top\mathbf{W}_{kk}\mathbf{X}_{1k} + \mathbf{G}_{1k} &
  \cdots & \mathbf{X}_{1k}^\top\mathbf{W}_{kk}\mathbf{X}_{p_kk} \\
\vdots & \ddots & \vdots \\
\mathbf{X}_{p_kk}^\top\mathbf{W}_{kk}\mathbf{X}_{1k} & \cdots & \mathbf{X}_{p_kk}^\top\mathbf{W}_{kk}\mathbf{X}_{p_kk} + \mathbf{G}_{p_kk}
\end{pmatrix}^{(t)},
$$
with diagonal weight matrix $\mathbf{W}_{kk} = -diag(\partial^2 \ell(\boldsymbol{\vartheta}_k | \mathbf{y}) /
\partial \boldsymbol{\eta}_k \partial \boldsymbol{\eta}_k^\top)$ and penalty matrix
$\mathbf{G}_{jk} = 0.5\tau_{jk}^{-2}\mathbf{K}_{jk}$. Similarly, the score vector is
$$
\mathbf{s}_k\left( \boldsymbol{\vartheta}_k^{(t)} \right) =
\begin{pmatrix}
\mathbf{X}_{1k}^\top \mathbf{u}_k^{(t)} - \mathbf{G}_{1k}\boldsymbol{\vartheta}_{1k}^{(t)} \\
\vdots \\
\mathbf{X}_{p_kk}^\top \mathbf{u}_k^{(t)} - \mathbf{G}_{p_kk}\boldsymbol{\vartheta}_{p_kk}^{(t)} \\
\end{pmatrix}
$$
and derivatives $\mathbf{u}_k = \partial \ell(\boldsymbol{\vartheta}_k | \mathbf{y}) /
\partial \boldsymbol{\eta}_k$. Focusing on the $j$th row of (\ref{eqn:blocknewton}) gives
\begin{eqnarray*}
(\mathbf{X}_{jk}^\top\mathbf{W}_{kk}\mathbf{X}_{jk} + \mathbf{G}_{jk})\boldsymbol{\vartheta}_{jk}^{(t+1)} +
\ldots + \mathbf{X}_{jk}^\top\mathbf{W}_{kk}\mathbf{X}_{p_kk}\boldsymbol{\vartheta}_{p_kk}^{(t + 1)} - \\
(\mathbf{X}_{jk}^\top\mathbf{W}_{kk}\mathbf{X}_{jk} + \mathbf{G}_{jk})\boldsymbol{\vartheta}_{jk}^{(t)} -
\ldots - \mathbf{X}_{jk}^\top\mathbf{W}_{kk}\mathbf{X}_{p_kk}\boldsymbol{\vartheta}_{p_kk}^{(t)}
  &=& \mathbf{X}_{jk}^\top \mathbf{u}_k^{(t)} - \mathbf{G}_{jk}\boldsymbol{\vartheta}_{jk}^{(t)}
\end{eqnarray*}
\begin{eqnarray*}
\mathbf{G}_{jk}(\boldsymbol{\vartheta}_{jk}^{(t+1)} - \boldsymbol{\vartheta}_{jk}^{(t)}) +
  \mathbf{X}_{jk}^\top\mathbf{W}_{kk}\mathbf{X}_{jk}\boldsymbol{\vartheta}_{jk}^{(t+1)} + \ldots +
  \mathbf{X}_{jk}^\top\mathbf{W}_{kk}\mathbf{X}_{p_kk}\boldsymbol{\vartheta}_{p_kk}^{(t+1)} - \\
  \mathbf{X}_{jk}^\top\mathbf{W}_{kk}\mathbf{X}_{jk}\boldsymbol{\vartheta}_{jk}^{(t)} - \ldots -
  \mathbf{X}_{jk}^\top\mathbf{W}_{kk}\mathbf{X}_{p_kk}\boldsymbol{\vartheta}_{p_kk}^{(t)}
  &=& \mathbf{X}_{jk}^\top \mathbf{u}_k^{(t)} - \mathbf{G}_{jk}\boldsymbol{\vartheta}_{jk}^{(t)}
\end{eqnarray*}
\begin{eqnarray*}
\mathbf{G}_{jk}\boldsymbol{\vartheta}_{jk}^{(t)} +
  \mathbf{G}_{jk}(\boldsymbol{\vartheta}_{jk}^{(t+1)} - \boldsymbol{\vartheta}_{jk}^{(t)}) +
  \mathbf{X}_{jk}^\top\mathbf{W}_{kk}\mathbf{X}_{jk}\boldsymbol{\vartheta}_{jk}^{(t+1)} + \ldots +
  \mathbf{X}_{jk}^\top\mathbf{W}_{kk}\mathbf{X}_{p_kk}\boldsymbol{\vartheta}_{p_kk}^{(t+1)} - \\
  \mathbf{X}_{jk}^\top\mathbf{W}_{kk}\mathbf{X}_{jk}\boldsymbol{\vartheta}_{jk}^{(t)} - \ldots -
  \mathbf{X}_{jk}^\top\mathbf{W}_{kk}\mathbf{X}_{p_kk}\boldsymbol{\vartheta}_{p_kk}^{(t)}
  &=& \mathbf{X}_{jk}^\top \mathbf{u}_k^{(t)}
\end{eqnarray*}
\begin{eqnarray*}
\mathbf{G}_{jk}\boldsymbol{\vartheta}_{jk}^{(t+1)} +
  \mathbf{X}_{jk}^\top\mathbf{W}_{kk}\mathbf{X}_{jk}\boldsymbol{\vartheta}_{jk}^{(t+1)} + \ldots +
  \mathbf{X}_{jk}^\top\mathbf{W}_{kk}\mathbf{X}_{p_kk}\boldsymbol{\vartheta}_{p_kk}^{(t+1)} - \\
  \mathbf{X}_{jk}^\top\mathbf{W}_{kk}\mathbf{X}_{jk}\boldsymbol{\vartheta}_{jk}^{(t)} - \ldots -
  \mathbf{X}_{jk}^\top\mathbf{W}_{kk}\mathbf{X}_{p_kk}\boldsymbol{\vartheta}_{p_kk}^{(t)}
  &=& \mathbf{X}_{jk}^\top \mathbf{u}_k^{(t)}
\end{eqnarray*}
\begin{eqnarray*}
\mathbf{G}_{jk}\boldsymbol{\vartheta}_{jk}^{(t+1)} +
  \mathbf{X}_{jk}^\top\mathbf{W}_{kk}\mathbf{X}_{jk}\boldsymbol{\vartheta}_{jk}^{(t+1)} + 
  \mathbf{X}_{jk}^\top\mathbf{W}_{kk}\boldsymbol{\eta}_{k, -j}^{(t+1)} -
  \mathbf{X}_{jk}^\top\mathbf{W}_{kk}\boldsymbol{\eta}_{k}^{(t)}
  &=& \mathbf{X}_{jk}^\top \mathbf{u}_k^{(t)}
\end{eqnarray*}
\begin{eqnarray*}
(\mathbf{G}_{jk} +
  \mathbf{X}_{jk}^\top\mathbf{W}_{kk}\mathbf{X}_{jk})\boldsymbol{\vartheta}_{jk}^{(t+1)}
  &=& \mathbf{X}_{jk}^\top \mathbf{u}_k^{(t)} + \mathbf{X}_{jk}^\top\mathbf{W}_{kk}\boldsymbol{\eta}_{k}^{(t)} -
    \mathbf{X}_{jk}^\top\mathbf{W}_{kk}\boldsymbol{\eta}_{k, -j}^{(t+1)}
\end{eqnarray*}
\begin{eqnarray*}
  \boldsymbol{\vartheta}_{jk}^{(t+1)}
  &=& (\mathbf{G}_{jk} +
  \mathbf{X}_{jk}^\top\mathbf{W}_{kk}\mathbf{X}_{jk})^{-1}(\mathbf{X}_{jk}^\top \mathbf{u}_k^{(t)} +
    \mathbf{X}_{jk}^\top\mathbf{W}_{kk}\boldsymbol{\eta}_{k}^{(t)} -
    \mathbf{X}_{jk}^\top\mathbf{W}_{kk}\boldsymbol{\eta}_{k, -j}^{(t+1)})
\end{eqnarray*}
\begin{eqnarray*}
  \boldsymbol{\vartheta}_{jk}^{(t+1)}
  &=& (\mathbf{G}_{jk} +
  \mathbf{X}_{jk}^\top\mathbf{W}_{kk}\mathbf{X}_{jk})^{-1}\mathbf{X}_{jk}^\top(\mathbf{u}_k^{(t)} +
    \mathbf{W}_{kk}\boldsymbol{\eta}_{k}^{(t)} -
    \mathbf{W}_{kk}\boldsymbol{\eta}_{k, -j}^{(t+1)})
\end{eqnarray*}
\begin{eqnarray*}
  \boldsymbol{\vartheta}_{jk}^{(t+1)}
  &=& (\mathbf{G}_{jk} +
  \mathbf{X}_{jk}^\top\mathbf{W}_{kk}\mathbf{X}_{jk})^{-1}\mathbf{X}_{jk}^\top(
    \mathbf{W}_{kk}\mathbf{W}_{kk}^{-1}\mathbf{u}_k^{(t)} +
    \mathbf{W}_{kk}\boldsymbol{\eta}_{k}^{(t)} -
    \mathbf{W}_{kk}\boldsymbol{\eta}_{k, -j}^{(t+1)})
\end{eqnarray*}
\begin{eqnarray*}
  \boldsymbol{\vartheta}_{jk}^{(t+1)}
  &=& (\mathbf{G}_{jk} +
  \mathbf{X}_{jk}^\top\mathbf{W}_{kk}\mathbf{X}_{jk})^{-1}\mathbf{X}_{jk}^\top\mathbf{W}_{kk}(
    \mathbf{W}_{kk}^{-1}\mathbf{u}_k^{(t)} +
    \boldsymbol{\eta}_{k}^{(t)} -
    \boldsymbol{\eta}_{k, -j}^{(t+1)})
\end{eqnarray*}
\begin{eqnarray} \label{eqn:blockbackfit}
  \boldsymbol{\vartheta}_{jk}^{(t+1)}
  &=& (\mathbf{G}_{jk} +
  \mathbf{X}_{jk}^\top\mathbf{W}_{kk}\mathbf{X}_{jk})^{-1}\mathbf{X}_{jk}^\top\mathbf{W}_{kk}(
    \mathbf{z}_k - \boldsymbol{\eta}_{k, -j}^{(t+1)})
\end{eqnarray}
with working observations
$\mathbf{z}_k = \boldsymbol{\eta}_{k}^{(t)} + \mathbf{W}_{kk}^{-1}\mathbf{u}_k^{(t)}$.
Hence, this leads to a backfitting algorithm and cycling through (\ref{eqn:blockbackfit}) for
terms $j = 1, \ldots, p_k$ and parameters $k = 1, \ldots, K$ is equivalent to a single
Newton-Raphson step of (\ref{eqn:newton}). Note that this is a slightly simplified version of the
backfitting algorithm in \citet{bamlss:Rigby+Stasinopoulos:2005} Appendix~C.2.


\subsubsection{Bayesian}

In the corresponding Bayesian approach
property (\ref{eqn:z}) can also be utilized to construct multivariate normal IWLS proposals for
$(\boldsymbol{\beta}_k, \boldsymbol{\gamma}_k)^\top$ to setup a Metropolis-Hastings MCMC sampler,
see \citet{bamlss:Klein+Kneib+Lang:2013}. Amongst others, the advantage of Bayesian MCMC algorithms 
is that the variance parameters can be estimated simultaneously with the regression coefficients.


\subsection{Inference and prediction} \label{sec:infpred}

\subsection{Lego bricks} \label{sec:leobricks}

From the above, it can be recognized that the following quantities are repeatedly used within
BAMLSS candidate algorithms:
\begin{itemize}
\item The density function $f(\mathbf{y} | \boldsymbol{\theta}_1, \ldots, \boldsymbol{\theta}_K)$.
\item The first order derivatives
  $\partial \ell(\boldsymbol{\vartheta} | \mathbf{y}) / \partial \boldsymbol{\theta}_k$,
  $\partial \boldsymbol{\theta}_k / \partial \boldsymbol{\eta}_k$ and
  $\partial \boldsymbol{\eta}_k / \partial \boldsymbol{\vartheta}_k$.
\item Second order derivatives
  $\partial^2 \ell(\boldsymbol{\vartheta} | \mathbf{y}) / \partial \boldsymbol{\eta}_k \partial \boldsymbol{\eta}_k^\top$.
\item Derivatives for priors, e.g., $ln \, p(\boldsymbol{\beta}_{jk} | \tau_{jk}^2)$ and $ln \, p(\tau_{jk}^2)$.
\end{itemize}
Hence, a modular family specification system can in principle be used to implement various
estimation algorithms. A simple generic algorithm for BAMLSS models is outlined by the 
following pseudo code:
\begin{center}
\begin{minipage}[c]{13cm}
\code{while(eps >} $\varepsilon\,$ \code{\& i < maxit) \{ } \\
\hspace*{0.5cm} \code{for(k in 1:K) \{} \\
\hspace*{1cm} \code{for(j in 1:p) \{} \\
\hspace*{1.5cm} Compute $\boldsymbol{\eta}^{\texttt{[k]}}_{\texttt{-j}} = \boldsymbol{\eta}^{\texttt{[k]}} - \mathbf{f}_{\texttt{j}}^{\texttt{[k]}}$. \\
\hspace*{1.5cm} Obtain new $(\boldsymbol{\beta}^{\texttt{[k]}}_{\texttt{j}}, {\tau^2}^{\texttt{[k]}}_{\texttt{j}})^\top = \texttt{u}_{\texttt{j}}^{\texttt{[k]}}(\mathbf{y}, \boldsymbol{\eta}^{\texttt{[k]}}_{\texttt{-j}},
  \mathbf{x}^{\texttt{[k]}}_{\texttt{j}}, \boldsymbol{\beta}^{\texttt{[k]}}_{\texttt{j}}, {\tau^2}^{\texttt{[k]}}_{\texttt{j}}, \texttt{family}, \texttt{k})$. \\
\hspace*{1.5cm} Update $\boldsymbol{\eta}^{\texttt{[k]}}$. \\
\hspace*{1cm} \code{\}} \\
\hspace*{0.5cm} \code{\}} \\
\hspace*{0.5cm} Compute new \code{eps} \\
\code{\}}
\end{minipage}
\end{center}
The algorithm does not distinguish between the frequentist or Bayesian approach, because the 
functions $\texttt{u}_{\texttt{j}}^{\texttt{[k]}}( \cdot )$ could either return proposals from
a MCMC sampler or updates from an optimizing algorithm like the IWLS. Therefore, $\varepsilon$ 
(e.g., $0.0001$) and \code{eps} represent the stopping mechanism in an optimizer while
\code{maxit} controls the maximum iterations of a MCMC sampler, too. To achieve this flexibility a
\code{family} object that contains all distribution specific information to compute the new
parameters
$(\boldsymbol{\beta}^{\texttt{[k]}}_{\texttt{j}}, {\tau^2}^{\texttt{[k]}}_{\texttt{j}})^\top$ is
required, e.g., containing the log-likelihood function, the first and second order derivatives,
etc., as described in the above.

%In practice, only few implementations support an entirely modular setup that can be
%extended by the user. Examples that do support some flexibility are the \proglang{R}
%model fitting functions \fct{glm}, \fct{gam} as well as function \fct{gamlss} of package \pkg{gamlss}
%\citep{bamlss:Stasinopoulos+Rigby:2014}.


\section{Computational tools and strategies for implementation} \label{sec:comptools}

\subsection{Symbolic descriptions} \label{sec:symdesc}

Based on \citet{bamlss:Wilkinson+Rogers:1973} symbolic descriptions for specifying models have been
implemented for various computer programs. The statistical environment \proglang{R} provides such
a syntax (see also \citealp{bamlss:Chambers+Hastie:1992}), which is familiar to almost any common
\proglang{R} user today. Without such specifications, that in the end translate model formulae into
model frames, the estimation of regression models is very circumstantial, especially in the case of
structured additive predictors (\ref{eqn:structadd}). Therefore, the \proglang{R} model formula
language is also extensible. The recommended package \pkg{mgcv}~\citep{bamlss:Wood:2014} for
estimating GAMs additionally provides the generic descriptor \code{s()} for smooth terms. However,
to conveniently specify the models presented in Section~\ref{sec:models}, a slightly enhanced syntax
is required.

Hereinafter, we follow the notation of the \proglang{R} formula language and denote
smooth and random effect terms with the \code{s()} descriptor. A typical linear regression model 
with a response variable \code{y} and covariates \code{x1} and \code{x2} is then represented by
\begin{center}
\code{y} $\sim$ \code{x1 + x2}
\end{center}
A model with two additional nonlinear modeled terms of covariates \code{z1}, \code{z2} and \code{z3}
is set up with
\begin{center}
\begin{tabular}{l}
\code{y} $\sim$ \code{x1 + x2 + s(z1) + s(z2, z3)}
\end{tabular}
\end{center}
However, in the context of distributional regression we need formula extensions for multiple
parameters. A convenient way to specify, e.g., the parameters of a normal model with
$y~\sim~N(\mu = \eta_{\mu}, log(\sigma) = \eta_{\sigma})$ is given by
\begin{center}
{ \renewcommand{\arraystretch}{1}
\begin{tabular}{l}
\code{list(} \\
$\quad$ \code{y} $\sim$ \code{x1 + x2 + s(z1) + s(z2),} \\
$\quad$ \code{sigma} $\sim$ \code{x1 + x2 + s(z1)} \\
\code{)}
\end{tabular}
}
\end{center}
i.e., two formulas are provided where the first represents the description of the mean $\mu$
and the second of the scale parameter $\sigma$. Furthermore, the two formulas
are symbolically connected by a list of formulas that is send to the subsequent processor. This way
any number of parameters can be easily specified, e.g., a four parameter example is
\begin{center}
{ \renewcommand{\arraystretch}{1}
\begin{tabular}{l}
\code{list(} \\
$\quad$ \code{y} $\sim$ \code{x1 + x2 + s(z1) + s(z2),} \\
$\quad$ \code{sigma2} $\sim$ \code{x1 + x2 + s(z1),} \\
$\quad$ \code{nu} $\sim$ \code{s(z1),} \\
$\quad$ \code{tau} $\sim$ \code{s(z2)} \\
\code{)}
\end{tabular}
}
\end{center}
A convention we make at this point is that
the mean formula is always the one including the response variable and all other formulas
have the corresponding parameter name on the left hand side. Hence, a mapping of terms with 
parameters is provided.

Within this syntax it is also possible to incorporate multilevel models with STAR predictor
\citep{bamlss:Lang+Umlauf+Wechselberger+Harttgen+Kneib:2014}, where a hierarchy of
units or clusters grouped at different levels is given. Suppose there is data on three levels
available, where variable \code{id1} denotes the indicator from the individual observations to the
second level with lower resolution and \code{id2} is another indicator mapping from the second to
third level. A four parameter model with 3 levels can be specified with
\begin{center}
{ \renewcommand{\arraystretch}{1}
\begin{tabular}{l}
\code{list(} \\
$\quad$ \code{y} $\sim$ \code{x1 + x2 + s(z1) + s({\color{heat1}{id1}}),} \\
$\quad$ {\color{heat1}{\code{id1} $\sim$ \code{x3 + s(z3) + s(}}}\code{\color{blue1}{id2}}\code{\color{heat1})}\code{,} \\
$\quad$ {\color{blue1}{\code{id2} $\sim$ \code{s(z4)}}}\code{,} \\
$\quad$ \code{sigma2} $\sim$ \code{x1 + x2 + s(z1),} \\
$\quad$ \code{nu} $\sim$ \code{s(z1) + s({\color{heat1}{id1}}),} \\
$\quad$ \code{tau} $\sim$ \code{s(z2)} \\
\code{)}
\end{tabular}
}
\end{center}
Note that the mean and \code{nu} parameter include the indicator variable \code{id1}, therefore,
the level two and three formulas are incorporated in both specifications.

In addition, models with categorical responses can be formulated in a similar fashion. A model
with three categories within the \code{y} variable, e.g., a multinomial model with some
reference category can be defined by
\begin{center}
{ \renewcommand{\arraystretch}{1}
\begin{tabular}{l}
\code{list(} \\
$\quad$ \code{y} $\sim$ \code{x1 + s(z1) + s(z2),} \\
$\quad$ $\sim$ \code{x1 + x2 + s(z1) + s(z3)} \\
\code{)}
\end{tabular}
}
\end{center}
where all subsequent formulas do not need a left hand side. The only additional assumption here is
that the order of the formulas represents the order of the categories. Another option is to specify
the formulas of each category explicitly by
\begin{center}
{ \renewcommand{\arraystretch}{1}
\begin{tabular}{l}
\code{list(} \\
$\quad$ \code{response1} $\sim$ \code{x1 + s(z1) + s(z2),} \\
$\quad$ \code{response2} $\sim$ \code{x1 + x2 + s(z1) + s(z3)} \\
\code{)}
\end{tabular}
}
\end{center}
i.e., variable \code{response1} is a dummy variable indicating whether the $i$th observation is in
category 1 and \code{response2} in category 2, respectively.

In summary, the described model definition syntax does not restrict to any type of regression
model, number of parameters and hierarchies.

\subsection{Building blocks} \label{sec:blocks}

The architecture of the conceptional framework is illustrated in Figure~\ref{fig:blocks}.
\begin{figure}[ht!]
\centering
\setlength{\unitlength}{1cm}
\setlength{\fboxsep}{0pt}
\begin{picture}(10.53, 5.7)(0, 0)
\put(0, 5){\fcolorbox{black}{heat5}{\framebox(2, 0.7)[c]{\footnotesize Formula}}}
\put(2.5, 5){\fcolorbox{black}{heat5}{\framebox(2, 0.7)[c]{\footnotesize Family}}}
\put(5, 5){\fcolorbox{black}{heat5}{\framebox(2, 0.7)[c]{\footnotesize Data}}}
\put(2.5, 3.5){\fcolorbox{black}{heat4}{\framebox(2, 0.7)[c]{\footnotesize Parser}}}
\put(2.5, 2.5){\fcolorbox{black}{heat3}{\framebox(2, 0.7)[c]{\footnotesize Transformer}}}
\put(6, 3.5){\fcolorbox{black}{heat2}{\framebox(2, 0.7)[c]{\footnotesize Setup}}}
\put(6, 2.5){\fcolorbox{black}{heat1}{\framebox(2, 0.7)[c]{\footnotesize Engine}}}
\put(6, 1.5){\fcolorbox{black}{heat2}{\framebox(2, 0.7)[c]{\footnotesize Results}}}
\put(1, 0){\fcolorbox{black}{heat5}{\framebox(2, 0.7)[c]{\footnotesize Summaries}}}
\put(3.5, 0){\fcolorbox{black}{heat5}{\framebox(2, 0.7)[c]{\footnotesize Plotting}}}
\put(6, 0){\fcolorbox{black}{heat5}{\framebox(2, 0.7)[c]{\footnotesize Selection}}}
\put(8.5, 0){\fcolorbox{black}{heat5}{\framebox(2, 0.7)[c]{\footnotesize Prediction}}}
\put(3.5, 4.2){\line(0, 1){0.8}}
\put(1, 5){\line(0, -1){0.4}}
\put(6, 5){\line(0, -1){0.4}}
\put(1, 4.605){\line(1, 0){5}}
\put(3.5, 3.2){\line(0, 1){0.3}}
\put(4.51, 2.85){\line(1, 0){0.8}}
\put(5.3, 2.85){\line(0, 1){1}}
\put(5.3, 3.85){\line(1, 0){0.72}}
\put(2, 0.7){\line(0, 1){0.4}}
\put(4.5, 0.7){\line(0, 1){0.4}}
\put(7, 0.7){\line(0, 1){0.8}}
\put(9.5, 0.7){\line(0, 1){0.4}}
\put(2, 1.098){\line(1, 0){7.5}}
\put(7, 2.2){\line(0, 1){0.3}}
\put(7, 3.2){\line(0, 1){0.3}}
\end{picture}
\caption{\label{fig:blocks} Conceptional overview.}
\end{figure}
The framework can be divided in three parts: First, functions that describe distribution families,
formulas, together with the data that is used for modeling. Secondly, functions that actually
compute estimates of parameters, and thirdly, functions for visualization and output statistics.

To set up the necessary model frame, the parser function translates the model formula
(see Section~\ref{sec:symdesc}) and the data. For some algorithms a modified version of the
model frame is needed, e.g., using the mixed model representation (\ref{eqn:mixed}) for smooth
terms. Hence, a transformer function might be required. For using standalone estimation engines
additional specifications could be required, e.g., the model code when using \proglang{BUGS} 
implementations. This task is handled by the setup function. The actual estimation function then
calls the engine, either an external device or code within the same environment. The data obtained
from the engine is then uniformly processed in a results function to be able to plot estimates, 
create summary statistics, and so forth.

The main advantage of the architecture is that the blocks parser, transformer, setup, engine and 
results are entirely exchangeable and reusable, i.e., it is relatively easy to incorporate new
algorithms or engines. The other blocks are assumed to be more or less stable such that no extra
coding is required. An implementation of this concept together with examples is illustrated in the
next section.


\section{Software implementation and examples} \label{sec:softex}


\section{Summary}\label{sec:conclusion}


\section*{Acknowledgments}


\bibliography{bamlss}


\clearpage


\begin{appendix}

\end{appendix}


\end{document}

