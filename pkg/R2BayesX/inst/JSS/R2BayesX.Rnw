\documentclass[article]{jss}
%\documentclass[nojss]{jss}
\usepackage{amsmath,amssymb,amsfonts,thumbpdf}

%% additional commands
\newcommand{\squote}[1]{`{#1}'}
\newcommand{\dquote}[1]{``{#1}''}
\newcommand{\fct}[1]{{\texttt{#1()}\index{#1@\texttt{#1()}}}}
\newcommand{\class}[1]{\dquote{\texttt{#1}}}
%% for internal use
\newcommand{\fixme}[1]{\emph{\marginpar{FIXME} (#1)}}
\newcommand{\readme}[1]{\emph{\marginpar{README} (#1)}}

\author{Nikolaus Umlauf\\Universit\"at Innsbruck \And
        Thomas Kneib\\Universit\"at Oldenburg \And
        Stefan Lang\\Universit\"at Innsbruck \And        
        Achim Zeileis\\Universit\"at Innsbruck}
\Plainauthor{Nikolaus Umlauf, Thomas Kneib, Stefan Lang, Achim Zeileis}

\title{Structured Additive Regression Models: An \proglang{R} Interface to \pkg{BayesX}}
\Plaintitle{Structured Additive Regression Models: An R Interface to BayesX}

\Keywords{STAR models, MCMC, REML, stepwise, \proglang{R}}
\Plainkeywords{STAR models, MCMC, REML, stepwise, R}

%% \Volume{13}
%% \Issue{9}
%% \Month{September}
%% \Year{2004}
%% \Submitdate{2004-09-29}
%% \Acceptdate{2004-09-29}

\Abstract{
  This article describes the \proglang{R} interface to \pkg{BayesX}, a very comprehensive 
  semiparametric regression toolbox based on open-source \proglang{C++} code for analyzing 
  structured additive regression models (STAR). 
  STAR models provide a flexible framework for modeling possible nonlinear effects of covariates: 
  They contain the well established frameworks of generalized linear models (GLM) and generalized 
  additive models (GAM) as special cases but also allow a wider class of effects, e.g., for 
  geographical or spatio-temporal data. This allows for the specification of complex and realistic 
  models that can typically be conveniently estimated using Bayesian inference based on modern 
  Markov chain Monte Carlo (MCMC) simulation techniques or a mixed model representation.
  Although there is already a quite extensive existing toolset in \proglang{R} supporting GLMs and 
  GAMs, many of the more complex models from the STAR class, especially those utilizing Bayesian 
  inference, are currently not easily available. They are, however, provided in BayesX, which not 
  only covers models for responses from univariate exponential families, but also models from 
  non-standard regression situations such as models for categorical responses with either ordered or 
  unordered categories, continuous time survival data, or continuous time multi-state models.
  Since there has been increasing interest in an \proglang{R} interface to BayesX, the already 
  existing CRAN package \pkg{BayesX}, which previously provided mainly functions for exploring 
  estimation results, is now extended to a full interactive interface. With the new version of the 
  package, STAR models can be conveniently specified using \proglang{R}'s formula language (with 
  some extended terms), fitted using the BayesX binary, represented in \proglang{R} with objects of 
  suitable classes, and finally printed/summarized/plotted.
}

\Address{
  Nikolaus Umlauf, Stefan Lang, Achim Zeileis\\
  Department of Statistics\\
  Universit\"at Innsbruck\\
  Universit\"atsstr.~15\\
  A-6020 Innsbruck, Austria\\
  E-mail: \email{Nikolaus.Umlauf@uibk.ac.at},\\
  \phantom{E-mail: }\email{Stefan.Lang@uibk.ac.at},\\
  \phantom{E-mail: }\email{Achim.Zeileis@R-project.org}\\
  URL: \url{http://www.uibk.ac.at/statistics/personal/umlauf/},\\
  \phantom{URL: }\url{http://www.uibk.ac.at/statistics/personal/lang/},\\
  \phantom{URL: }\url{http://eeecon.uibk.ac.at/~zeileis/}\\
  
  Thomas Kneib\\
  Department of Mathematics\\
  Universit\"at Oldenburg\\
  D-26111 Oldenburg, Germany \\
  E-mail: \email{Thomas.Kneib@uni-oldenburg.de}\\
  URL: \url{http://www.staff.uni-oldenburg.de/thomas.kneib/}
}

%% Sweave/vignette information and metadata
%% need no \usepackage{Sweave}
\SweaveOpts{engine = R, eps = FALSE, keep.source = TRUE}
%\VignetteIndexEntry{Structured Additive Regression Models: An R Interface to BayesX}
%\VignetteDepends{colorspace,mgcv,BayesX,akima}
%\VignetteKeywords{STAR models, MCMC, REML, stepwise, R}
%\VignettePackage{R2BayesX}

<<preliminaries, echo=FALSE, results=hide>>=
options(width = 70, prompt = "R> ", continue = "+  ")
library("R2BayesX")
data("ZambiaBnd")
data("BeechBnd")
@


\begin{document}


\section{Introduction} \label{sec:intro}

The idea to embed the open source software package BayesX \citep{Brezger+Kneib+Lang:2005} in 
\proglang{R} \citep{R} and utilize the possibilities of its programming language to provide an even 
more interactive and intuitive way to estimate and analyze complex regression models, has been in 
mind for quite a while. However, since the development status of the project is already very 
advanced, and there has been more and more recent interest of an \proglang{R} version of BayesX, the 
compromise of creating an interface, compared to a full code portation, was seen advantageous, not 
only because of a faster development time, but also offering already familiar users a toolset, that 
even, beside the possibility to formulate STAR models directly on the console, easily allows to use 
existing code and model output, within \proglang{R}. 

Therefore, the implementation is structured in several independent operating functions that 
basically set up the necessary model components at first, send these to the BayesX binary for 
processing, read the returned output files back into \proglang{R} by conversion to objects of 
suitable classes, which may then be printed, summarized and visualized. All the functionality
of the interface has been added to the CRAN package \pkg{BayesX} \citep{Kneib+Heinzl+Brezger:2011}, 
which previously provided mainly functions for exploring estimation results.

One of the major problems designing the interface was to choose a comfortable translation method
of \proglang{R} specific syntax for setting up STAR models in BayesX. For this reason, the package 
layout is orientated and dependent on the recommended CRAN package \pkg{mgcv} \citep{Wood:2011}, 
since \pkg{mgcv} already provides functionality, which easily allows to set up new model terms 
within \proglang{R}'s formula language, and secondly, the package covers a number of the model terms 
implemented in BayesX. This means, some of the model formulas specified for use within the 
\pkg{mgcv} model fitting function \fct{gam}, may also be used in \pkg{BayesX} and vice versa. Hence, 
the user may analyze models in both settings by changing the function call, only. This is 
illustrated in the following, where some data is simulated and models are estimated with \fct{gam},
using generalized cross validation (GCV) for estimation, and the \pkg{BayesX} interface main model 
fitting function \fct{bayesx} applying MCMC: 
<<fit-illustration-model, echo=TRUE, eval=FALSE>>=
## generate some data
set.seed(111)
n <- 100
     
## regressor
dat <- data.frame(x = runif(n, -3, 3))
     
## response
dat$y <- with(dat, 1.5 + sin(x) + rnorm(n, sd = 0.6))
     
## estimate models with
## mgcv GCV and BayesX MCMC
b1 <- gam(y ~ s(x, bs = "ps", k = 10), method = "GCV.Cp", data = dat)
b2 <- bayesx(y ~ s(x, bs = "ps", k = 10), method = "MCMC", data = dat)
@
<<cache-illustration-model, echo=FALSE, eval=TRUE>>=
if(file.exists("illustration-model.rda")) {
load("illustration-model.rda")
} else {
<<fit-illustration-model>>
save(b1, b2, file = "illustration-model.rda")
}
@
\begin{figure}[t!]
\setkeys{Gin}{width=0.49\textwidth}
\begin{center}
<<illustration-BayesX, echo=FALSE, fig=TRUE, width=5, height=4>>=
par(mar = c(4.1, 4.1, 0.1, 1.1))
plot(b1, residuals = TRUE, shade = TRUE, pch = 1)
@
<<illustration-mgcv, echo=FALSE, fig=TRUE, width=5, height=4>>=
par(mar = c(4.1, 4.1, 0.1, 1.1))
plot(b2, term = "s(x)", residuals = TRUE, 
  c.select = c("x", "Mean", "2.5%", "97.5%"), 
  fill.select = c(0, 0, 1, 1), col.polygons = "grey")
@
\end{center}
\caption{\label{fig:illustration} Illustration example: comparison of estimated effect estimated 
with package \pkg{mgcv} model fitting function \fct{mgcv} using GCV, left panel, and , \pkg{BayesX} 
model fitting function \fct{bayesx} using MCMC, right panel respectively.}
\end{figure}
A comparison plot of the estimated effects of the two models is given in 
figure~\ref{fig:illustration}.

To present the capabilities of the software, the next section briefly discusses the methodological 
background of regression models with a structured additive predictor, before an in detail 
description of the implementation is provided in section~\ref{sec:implementation}. In 
section~\ref{sec:illustrations}, the interface usability is demonstrated on a complex example with  
data concerning childhood malnutrition in Zambia as well as on a dataset on forest health.


\section{STAR models} \label{sec:model} 

The STAR model class supported by \pkg{BayesX} is based on the framework of (Bayesian) generalized 
linear models (GLM) \citep{Nelder+Wedderburn:1972, Fahrmeir+Tutz:2001}. GLMs assume that, given 
covariates $u$ and unknown parameters $\gamma$, the distribution of the response variable $y$ 
belongs to an exponential family with mean $\mu = E(y | \mathbf{x}, \boldsymbol{\gamma})$ linked to 
a linear predictor $\eta$ by
\begin{equation} \label{eqn:glm}
\mu = h(\eta) \qquad \eta = \mathbf{x}^{\prime}\boldsymbol{\gamma},
\end{equation}
where $h$ is a known link function and $\gamma$ are unknown regression parameters. For STAR models,
the linear predictor is replaced by a more general and flexible, so called structured 
additive predictor
\begin{equation} \label{eqn:structadd}
\eta = f_1(z_1) + \ldots + f_p(z_p) + \mathbf{x}^{\prime}\boldsymbol{\gamma},
\end{equation}
where covariates $z_j$, $j = 1,\ldots,p$, are of generic type and dimension, and $f_j$ are possibly 
smooth functions comprising effects (and combination of effects) as e.g. given by             
\begin{itemize}
\item nonlinear effects of continuous covariate $x$: $f_j(z_j) = f(x)$,
\item two-dimensional surfaces: $f_j(z_j) = f(x_1,x_2)$,
\item spatially correlated effects: $f_j(z_j) = f_{spat}(s)$, 
\item varying coefficients: $f_j(z_j) = x_1f(x_2)$, 
\item spatially varying effects: $f_j(z_j) = x_1f_{spat}(s)$ or $f_j(z_j) = x_1f(x_2, x_3)$, 
\item random intercepts with cluster index $c$: $f_j(z_j) = b_c$, 
\item random slopes with cluster index $c$: $f_j(z_j) = x \, b_c$. 
\end{itemize}
Therefore, STAR models cover a number of well known model classes as special cases, including
generalized additive models (GAM) \citep{Hastie+Tibshirani:1990}, generalized additive mixed models
(GAMM) \citep{Lin+Zhang:1999}, geoadditive models \citep{Kamman+Wand:2003}, varying coefficient 
models \citep{Hastie+Tibshirani:1993}, and geographically weighted regression 
\citep{Fotheringham+Brunsdon+Charlton:2002}.

The unified representation of a STAR predictor arises from the fact that all functions $f_j$ in 
(\ref{eqn:structadd}) may be specified by a basis function approach, where the vector of function  
evaluations $\mathbf{f}_j = (f_j(z_{1j}),\ldots,f_j(z_{nj}))$, with $i = 1,\ldots,n$ observations, 
can be written in matrix notation 
\begin{equation} \label{eqn:matnot}
\mathbf{f}_j = \mathbf{Z}_j\boldsymbol{\beta}_j,
\end{equation}
with $\mathbf{Z}_j$ as a design matrix, that only depends on the prior assumptions about smoothness 
of $f_j$, and $\boldsymbol{\beta}_j$ are unknown regression coefficients which have to be estimated. 
Hence, the predictor of (\ref{eqn:structadd}) may be rewritten by
\begin{equation} \label{eqn:structaddmat}
\boldsymbol{\eta} = \mathbf{Z}_1\boldsymbol{\beta}_1 + \ldots \mathbf{Z}_p\boldsymbol{\beta}_p 
+ \mathbf{X}\boldsymbol{\gamma},
\end{equation}
where $\mathbf{X}$ corresponds to the usual design matrix for the fixed effects.

In BayesX, estimation of regression coefficients is based on two inferential concepts, Markov chain 
Monte Carlo simulation techniques corresponding to full Bayesian inference \citep{Brezger+Lang:2006}
and mixed model methodology corresponding to penalized likelihood or empirical Bayes inference
\citep{Fahrmeir+Kneib+Lang:2004}. As a third alternative BayesX provides a penalized least squares
(respectively penalized likelihood) approach for estimating structured additive regression tools. In
addition, a powerful variable and model selection tool is included. Model choice and estimation of
the parameters is done simultaneously \citep{Belitz+Lang:2008}.

For all inferential concepts, the prior for the functions $f_j$ depends on the design matrix 
$\mathbf{Z}_j$, as e.g. determined by the functional types described above, and a prior for the 
vector $\boldsymbol{\beta}_j$, which may also be written in a general form given by
\begin{equation} \label{eqn:prior}
p(\boldsymbol{\beta}_j | \tau_j^2) \propto exp \left(- \frac{1}{2\tau_j^2} 
\boldsymbol{\beta_j}^{\prime}\mathbf{K}_j\boldsymbol{\beta}_j\right),
\end{equation}
with $\mathbf{K}_j$ as a quadratic penalty matrix that shrinks parameters towards zero or penalizes 
too abrupt jumps between neighboring parameters. In most cases $K_j$ will be rank deficient and the 
prior for $\boldsymbol{\beta}_j$ is partially improper.

The variance parameter $\tau_j^2$ is equivalent to the inverse smoothing parameter in a frequentist
approach and controls the trade off between flexibility and smoothness. For full Bayesian inference,
weakly informative inverse Gamma hyperpriors $\tau_j^2 \sim IG(a_j, b_j)$ are assigned to 
$\tau_j^2$, with $a_j = b_j = 0.001$ as a standard option. For empirical Bayes inference, $\tau_j^2$ 
is considered an unknown constant which is determined as a restricted maximum likelihood estimate 
(REML).

A thorough (and for most practical purposes sufficient) introduction into the regression models 
supported by the program is provided in the BayesX methodology manual 
\citep{Belitz+Brezger+Kneib+Lang:2011}.


\section[Implementation in R]{Implementation in \proglang{R}} \label{sec:implementation}

Before STAR models can be fitted with BayesX, the binary command line version of the 
program needs to be installed. This may be accomplished differently and system specific: one 
opportunity is to download the \proglang{C++} source-code from 
\begin{center}
\url{http://www.stat.uni-muenchen.de/~bayesx}, 
\end{center}
and compile the sources with the GNU \proglang{C++} compiler, besides on Windows operating systems, 
a pre-compiled computing kernel including a Java graphical interface may be installed, which 
automatically installs the command line version of BayesX, also. Another, and the recommended option 
on UNIX and Windows systems is to install the binary within \proglang{R} directly by calling the 
function \fct{install.bayesx}, which basically executes the described above. For all other platforms 
and possible problems, please see the help sites on the BayesX web-page. Installing BayesX from 
\proglang{R} then ideally requires only e.g. running
<<install-bayesx, echo=TRUE, eval=FALSE>>=
install.bayesx()
@
if the computer is connected to the world wide web and the user holds writing permissions for the
\pkg{BayesX} package folders, otherwise a valid installation directory must be supplied (in the 
majority of cases) as well as the source-code directory, if the source-code is already stored 
locally and does not need to be downloaded. After the successful installation, the full path to the 
binary must be set either within \proglang{R} directly, using e.g.
<<install-bayesx, echo=TRUE, eval=FALSE>>=
options(bayesx.bin = "/path/to/BayesX")
@
where \code{"/path/to/BayesX"} on Windows systems may be specified e.g. with \\
\code{"C:/BayesX/commandline/bayesx.exe"}, or adding the installation directory of the binary to the 
environment PATH variable. Afterwards, the function call
<<install-bayesx, echo=TRUE, eval=FALSE>>=
check.install.bayesx()
@
will check if BayesX may be called from \proglang{R}. 
 
The main model fitting function in \pkg{BayesX} is called \fct{bayesx}, which is basically a 
collection of the functions described in table~\ref{tab:bayesxfun}, that are executed one after 
another, i.e. the functionality of the interface is separated into independent functions, such that 
existing program files and model output may also be processed from \proglang{R}.
\begin{table}[h]
\begin{center}
\begin{tabular}{|l|p{10cm}|}
\hline
Function                 & Description \\ \hline
\fct{parse.bayesx.input} & parses \fct{bayesx} input parameters which are then send to
                           \fct{write.bayesx.input}. \\ \hline
\fct{write.bayesx.input} & takes an object from \fct{parse.bayesx.input} and translates the input to 
                           an executable program file which may be send to BayesX. \\ \hline
\fct{run.bayesx}         & runs BayesX program files from \proglang{R}. \\ \hline
\fct{read.bayesx.output} & automatically reads in BayesX estimation output which is stored in an 
                           output directory. \\ \hline
\end{tabular}
\caption{\label{tab:bayesxfun} Main functions of the interface.}
\end{center}
\end{table}
The arguments of \fct{bayesx} are
\begin{Sinput}
bayesx(formula, data, weights = NULL, subset = NULL, 
  offset = NULL, na.action = na.fail, contrasts = NULL, 
  control = bayesx.control(...), ...)
\end{Sinput}
where all arguments, except the last, are standard model frame specifications 
\citep[see][]{Chambers+Hastie:1992}.


\section{STAR models in practice} \label{sec:illustrations}

Section with two examples: Childhood malnutrition in Zambia and the forest health data.


\subsection{Childhood malnutrition in Zambia} \label{subsec:zambia}

\begin{table}[h]
\begin{center}
\begin{tabular}{|l|p{10cm}|}
\hline
Variable           & Description \\ \hline
\code{stunting}    & standardised Z-score for stunting. \\ \hline
\code{bmi}         & body mass index of the mother. \\ \hline
\code{agechild}    & age of the child in months. \\ \hline
\code{district}    & district where the mother lives. \\ \hline
\code{memployment} & mother's employment status with categories `working' and 
                     `not working'. \\ \hline
\code{education}   & mother's educational status with categories for complete primary but incomplete 
                     secondary `no/incomplete', complete secondary or higher `minimum primary' and 
                     no education or incomplete primary `minimum secondary'. \\ \hline
\code{urban}       & locality of the domicile with categories `yes' and `no'. \\ \hline
\code{gender}      & gender of the child with categories `male' and `female'. \\ \hline
\end{tabular}
\caption{\label{tab:zambia} Variables in the data set on childhood malnutrition in Zambia.}
\end{center}
\end{table}

<<fit-zambia-model, echo=TRUE, eval=FALSE>>=
data("ZambiaNutrition", package = "R2BayesX")
data("ZambiaBnd")
zm <- bayesx(stunting ~ memployment + education + urban + gender + 
  s(bmi, bs = "ps") + s(agechild, bs = "ps") +
  s(district, bs = "mrf", xt = list(map = ZambiaBnd)) + r(district),
  iter = 12000, burnin = 2000, step = 10, seed = 123,
  data = ZambiaNutrition)
@

<<cache-zambia-model, echo=FALSE, eval=TRUE>>=
if(file.exists("zambia-model.rda")) {
load("zambia-model.rda")
} else {
<<fit-zambia-model>>
save(zm, file = "zambia-model.rda")
}
@

<<summary-zambia-model>>=
summary(zm)
@

\begin{figure}[t!]
\setkeys{Gin}{width=0.49\textwidth}
\begin{center}
<<zambia-agechild, echo=FALSE, fig=TRUE, width=5, height=4>>=
par(mar = c(4.1, 4.1, 0.1, 1.1))
plot(zm, term = "s(agechild)")
@
<<zambia-bmi, echo=FALSE, fig=TRUE, width=5, height=4>>=
par(mar = c(4.1, 4.1, 0.1, 1.1))
plot(zm, term = "s(bmi)")
@
\end{center}
\caption{\label{fig:zambia-agechild} Example on childhood undernutrition: Effect of the body 
mass index of the child's mother and of the age of the child together with pointwise 80\% and 95\% 
credible intervals.}
\end{figure}

\begin{figure}[t!]
\setkeys{Gin}{width=0.49\textwidth}
\begin{center}
<<zambia-district-structured, echo=FALSE, fig=TRUE, width=5, height=4>>=
par(mar = c(0, 0, 0, 0))
plot(zm, term = "s(district)", map = ZambiaBnd, 
  pos = "topleft", width = 0.6, height = 0.2, 
  distance.labels = 2, swap = TRUE)
@
<<zambia-district-unstructured, echo=FALSE, fig=TRUE, width=5, height=4>>=
par(mar = c(0, 0, 0, 0))
plot(zm, term = "r(district)", map = ZambiaBnd, 
  pos = "topleft", width = 0.6, height = 0.2, 
  distance.labels = 2, swap = TRUE, 
  density = 20, angle = 90)
@
\end{center}
\caption{\label{fig:zambia-district-structured} Example on childhood malnutrition: Structured, 
left panel, and unstructured spatial effect, right panel respectively.}
\end{figure}


\subsection{Forest health data set} \label{subsec:forest}

\begin{table}[h]
\begin{center}
\begin{tabular}{|l|p{10cm}|}
\hline
Variable           & Description \\ \hline
\code{id}          & tree location identification number. \\ \hline
\code{year}        & year of census. \\ \hline
\code{defoliation} & percentage of tree defoliation in three ordinal
                     categories, 0 == `defoliation < 12.5\%', 1 == `12.5\% $\leq$
                     defoliation < 50\%' and 3 == `defoliation $\geq$ 50\%'. \\ \hline
\code{x}           & x-coordinate of the tree location. \\ \hline
\code{y}           & y-coordinate of the tree location. \\ \hline
\code{age}         & age of stands in years. \\ \hline
\code{canopy}      & forest canopy density in percent. \\ \hline
\code{inclination} & slope inclination in percent. \\ \hline
\code{elevation}   & elevation (meters above sea level). \\ \hline
\code{soil}        & soil layer depth in cm. \\ \hline
\code{ph}          & soil pH at 0-2cm depth. \\ \hline
\code{moisture}    & soil moisture level with categories 1 == `moderately
                     dry', 2 == `moderately moist' and 3 == `moist or temporarily
                     wet'. \\ \hline
\code{alkali}      & proportion of base alkali-ions with categories 1 == `low' 
                     to 4 == `high'. \\ \hline
\code{humus}       & humus layer thickness in cm. \\ \hline
\code{stand}       & stand type with categories `deciduous' and `mixed'. \\ \hline
\code{fertilized}  & fertilization applied with categories `yes' and `no'. \\ \hline
\end{tabular}
\caption{\label{tab:forest} Variables in the forest health data set.}
\end{center}
\end{table}

<<fit-forest-model, echo=TRUE, eval=FALSE>>=
data("ForestHealth", package = "R2BayesX")
data("BeechBnd")
data("BeechGra")
fm1 <- bayesx(defoliation ~  stand + fertilized + 
  humus + moisture + alkali + ph + soil + 
  s(age, bs = "ps") + s(inclination, bs = "ps") + 
  s(canopy, bs = "ps") + s(year, bs = "ps") + 
  s(elevation, bs = "ps"),
  family = "cumlogit", method = "REML", data = ForestHealth)
fm2 <- bayesx(defoliation ~  stand + fertilized + 
  humus + moisture + alkali + ph + soil + 
  s(age, bs = "ps") + s(inclination, bs = "ps") + 
  s(canopy, bs = "ps") + s(year, bs = "ps") + 
  s(elevation, bs = "ps") + 
  s(id, bs = "mrf", xt = list(map = BeechGra)),
  family = "cumlogit", method = "REML", data = ForestHealth)
@

<<cache-forest-model, echo=FALSE, eval=TRUE>>=
if(file.exists("forest-model.rda")) {
load("forest-model.rda")
} else {
<<fit-forest-model>>
save(fm1, fm2, file = "forest-model.rda")
}
@

<<summary-forest-model>>=
summary(c(fm1, fm2))
@

\begin{figure}[t!]
\setkeys{Gin}{width=0.49\textwidth}
\begin{center}
<<forest-no-spatial-age, echo=FALSE, fig=TRUE, width=5, height=4>>=
par(mar = c(4.1, 4.1, 0.1, 2.1))
plot(fm1, term = "s(age)")
@
<<forest-no-spatial-inclination, echo=FALSE, fig=TRUE, width=5, height=4>>=
par(mar = c(4.1, 4.1, 0.1, 2.1))
plot(fm1, term = "s(inclination)")
@ 
\\[2ex]

<<forest-no-spatial-canopy, echo=FALSE, fig=TRUE, width=5, height=4>>=
par(mar = c(4.1, 4.1, 0.1, 2.1))
plot(fm1, term = "s(canopy)")
@
<<forest-no-spatial-year, echo=FALSE, fig=TRUE, width=5, height=4>>=
par(mar = c(4.1, 4.1, 0.1, 2.1))
plot(fm1, term = "s(year)")
@ 
\\[2ex]

<<forest-no-spatial-elevation, echo=FALSE, fig=TRUE, width=5, height=4>>=
par(mar = c(4.1, 4.1, 0.1, 2.1))
plot(fm1, term = "s(elevation)")
@
\end{center}
\caption{\label{fig:forest-no-spatial} Forest damage: estimates of nonparametric effects including
80\% and 95\% point-wise confidence intervals of the model without the spatial effect.}
\end{figure}

\begin{figure}[t!]
\setkeys{Gin}{width=0.49\textwidth}
\begin{center}
<<forest-spatial-age, echo=FALSE, fig=TRUE, width=5, height=4>>=
par(mar = c(4.1, 4.1, 0.1, 2.1))
plot(fm2, term = "s(age)")
@
<<forest-spatial-inclination, echo=FALSE, fig=TRUE, width=5, height=4>>=
par(mar = c(4.1, 4.1, 0.1, 2.1))
plot(fm2, term = "s(inclination)")
@
\\[2ex]

<<forest-spatial-elevation, echo=FALSE, fig=TRUE, width=5, height=4>>=
par(mar = c(4.1, 4.1, 0.1, 2.1))
plot(fm2, term = "s(elevation)")
@
\end{center}
\caption{\label{fig:forest-spatial-nonpara} Forest damage: estimates of particular nonparametric 
effects including 80\% and 95\% point-wise confidence intervals of the model including the spatial 
effect.}
\end{figure}

\begin{figure}[t!]
\setkeys{Gin}{width=0.7\textwidth}
\begin{center}
<<forest-spatial-id, echo=FALSE, fig=TRUE, width=7, height=4>>=
par(mar = c(0, 0, 0, 0))
plot(fm2, term = "s(id)", map = BeechBnd, 
  pos = "topleft", width = 0.4, height = 0.2, 
  distance.labels = 2)
@
\end{center}
\caption{\label{fig:forest-spatial} Forest damage: estimate of the spatial effect.}
\end{figure}

\section{Summary}\label{sec:conclusion}


\section*{Acknowledgments}

\nocite{Kneib+Heinzl+Brezger:2011}
\bibliography{R2BayesX}


\end{document}
